import os
import json
import asyncio
import random
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Any, Awaitable, Callable, Dict, List, Optional

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, BaseMiddleware
from aiogram.types import (
    Message, CallbackQuery, ChatMemberUpdated,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaDocument,
    FSInputFile
)
from aiogram.filters import Command, ChatMemberUpdatedFilter, MEMBER
from aiogram.utils.media_group import MediaGroupBuilder

# ===================== ENV =====================
load_dotenv(".env.prem")
API_TOKEN = os.getenv("BOT_TOKEN2")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
MAIN_ADMIN_ID = int(os.getenv("MAIN_ADMIN_ID", "0"))
ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x.strip()]

if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.prem")
if ADMIN_CHAT_ID == 0:
    print("[WARN] ADMIN_CHAT_ID=0 ‚Äî –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–ø–∞–¥—É—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å .env.prem")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

REQUESTS_FILE = "requests.json"
CONFIG_FILE = "config.json"
WELCOME_IMAGE = "IMG_20250825_170645_742.jpg"

# ===================== STORAGE =====================
def _now() -> datetime:
    return datetime.now()

def load_requests() -> Dict[str, dict]:
    if not os.path.exists(REQUESTS_FILE):
        return {}
    try:
        with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
            txt = f.read().strip()
            data = json.loads(txt) if txt else {}
    except json.JSONDecodeError:
        print(f"[WARN] {REQUESTS_FILE} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
        data = {}

    # –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π (–ø–æ started_at)
    now = _now()
    changed = False
    for uid, rec in list(data.items()):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–µ "–≤–µ—á–Ω–∞—è" (—Ç.–µ. —É –Ω–µ–µ –µ—Å—Ç—å –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞)
        if rec.get("started_at"):
            started = rec.get("started_at")
            try:
                if started and now - datetime.fromisoformat(started) > timedelta(days=3):
                    del data[uid]
                    changed = True
            except (ValueError, TypeError):
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
                del data[uid]
                changed = True
    if changed:
        save_requests(data)
    return data


def save_requests(data: Dict[str, dict]) -> None:
    with open(REQUESTS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def update_user_lang(user_id: str, lang: str) -> List[str]:
    data = load_requests()
    rec = data.get(user_id) or {
        "full_name": "",
        "username": "",
        "langs": [],
        "started_at": None,
        "submitted": False,
        "has_seen_instructions": False, # [–ò–ó–ú–ï–ù–ï–ù–û] –ü–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    }
    if lang and lang not in rec["langs"]:
        rec["langs"].append(lang)
    data[user_id] = rec
    save_requests(data)
    return rec["langs"]

def start_request(user, langs: List[str]) -> None:
    data = load_requests()
    user_id_str = str(user.id)
    # [–ò–ó–ú–ï–ù–ï–ù–û] –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
    existing_record = data.get(user_id_str, {})
    has_seen = existing_record.get("has_seen_instructions", False)

    data[user_id_str] = {
        "full_name": user.full_name,
        "username": user.username or "",
        "langs": langs,
        "started_at": _now().isoformat(),
        "submitted": False,
        "has_seen_instructions": has_seen,
    }
    save_requests(data)

def mark_submitted(user_id: str) -> None:
    data = load_requests()
    if user_id in data:
        data[user_id]["submitted"] = True
        save_requests(data)

def can_start_new_request(user_id: str) -> bool:
    """–ú–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å (–∫–ª–∏–∫ –ø–æ —Å–ø–æ—Å–æ–±—É –æ–ø–ª–∞—Ç—ã)."""
    data = load_requests()
    rec = data.get(user_id)
    if not rec:
        return True
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –µ—Å—Ç—å, –Ω–æ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    if not rec.get("submitted"):
        return True
    if not rec.get("started_at"):
        return True
    started = datetime.fromisoformat(rec["started_at"])
    return _now() - started > timedelta(days=3)


def has_active_request(user_id: str) -> bool:
    """–ú–æ–∂–Ω–æ –ª–∏ —Å–µ–π—á–∞—Å –ø—Ä–∏—Å–ª–∞—Ç—å –°–í–û–Å –ï–î–ò–ù–°–¢–í–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞—è–≤–∫—É."""
    data = load_requests()
    rec = data.get(user_id)
    if not rec or not rec.get("started_at"):
        return False
    if rec.get("submitted"):
        return False
    started = datetime.fromisoformat(rec["started_at"])
    return _now() - started <= timedelta(days=3)

# ===================== CONFIG (—Ü–µ–Ω–∞) =====================
def load_config() -> dict:
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {"price": "9$"}

def save_config(config: dict) -> None:
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

# ===================== HELPERS =====================
async def ensure_private_and_autoleave(message: Message) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —ç—Ç–æ –õ–°. –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª ‚Äî –±–æ—Ç –ª–∏–≤–∞–µ—Ç (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ ADMIN_CHAT_ID) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False.
    """
    if message.chat.type in ("group", "supergroup", "channel"):
        if message.chat.id != ADMIN_CHAT_ID:
            try:
                await bot.leave_chat(message.chat.id)
                print(f"[LOG] –í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ {message.chat.id}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {e}")
        return False
    return True

def make_header(user: "aiogram.types.User", langs: List[str]) -> str:
    username = f"@{user.username}" if user.username else "‚Äî"
    langs_str = ", ".join(langs) or "‚Äî"
    return f"{user.full_name} | id {user.id} | {username} | –Ø–∑—ã–∫–∏: {langs_str}"

# ===================== ALBUM MIDDLEWARE (aiogram 3.x) =====================
class AlbumMiddleware(BaseMiddleware):
    def __init__(self, wait: float = 0.35):
        super().__init__()
        self.wait = wait
        self._buffer: Dict[str, List[Message]] = defaultdict(list)
        self._locks: Dict[str, asyncio.Lock] = defaultdict(asyncio.Lock)

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        if not isinstance(event, Message) or not event.media_group_id:
            return await handler(event, data)

        group_id = str(event.media_group_id)
        async with self._locks[group_id]:
            self._buffer[group_id].append(event)
            await asyncio.sleep(self.wait)
            messages = self._buffer.pop(group_id, [])
            if not messages:
                return

            messages.sort(key=lambda m: m.message_id)
            data["album"] = messages
            return await handler(messages[0], data)

dp.message.middleware(AlbumMiddleware())

# ===================== HANDLERS =====================
@dp.message(Command("start"))
async def send_welcome(message: Message):
    if not await ensure_private_and_autoleave(message):
        return

    update_user_lang(str(message.from_user.id), message.from_user.language_code or "unknown")

    price = load_config()["price"]
    caption = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–ª–∞—Ç—ë–∂–Ω—ã–π –±–æ—Ç Gene's Land!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–≤–µ—Ä—Å–∏—é Gene Brawl!\n\n"
        "Gene Premium Ultimate –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏)"
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"ü´£ Premium - {price}", callback_data="premium")],
            [InlineKeyboardButton(text="ü©º –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/genepremiumsupportbot")],
        ]
    )

    if os.path.exists(WELCOME_IMAGE):
        try:
            photo = FSInputFile(WELCOME_IMAGE)
            await message.answer_photo(photo=photo, caption=caption, reply_markup=keyboard)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")
            await message.answer(caption, reply_markup=keyboard)
    else:
        await message.answer(caption, reply_markup=keyboard)

@dp.message(Command("setprice"))
async def set_price(message: Message):
    if message.chat.id != ADMIN_CHAT_ID or message.from_user.id != MAIN_ADMIN_ID:
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].strip():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprice 15$")
        return

    new_price = args[1].strip()
    cfg = load_config()
    cfg["price"] = new_price
    save_config(cfg)
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price}")

# ---- –ö–Ω–æ–ø–∫–∏ –≤ –õ–° ----
@dp.callback_query(F.data == "premium")
async def process_premium(callback: CallbackQuery):
    if callback.message.chat.type != "private": return
    await callback.answer()
    price = load_config()["price"]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", url="https://t.me/GenePremium/6")],
            [InlineKeyboardButton(text="üá∑üá∫ –ö–∞—Ä—Ç–æ–π", callback_data="pay_card")],
            [InlineKeyboardButton(text="üåé Crypto (@send) (0%)", callback_data="pay_crypto")],
            [InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data="pay_stars")],
        ]
    )
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ Premium –∑–∞ {price}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.callback_query(F.data.in_(["pay_card", "pay_crypto", "pay_stars"]))
async def ask_screenshots(callback: CallbackQuery):
    if callback.message.chat.type != "private": return
    await callback.answer()

    user = callback.from_user
    user_id_str = str(user.id)
    
    if not can_start_new_request(user_id_str):
        await callback.message.answer("–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è ‚úÖ")
        return

    langs = update_user_lang(user_id_str, user.language_code or "unknown")
    start_request(user, langs) # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª–µ –∑–∞—è–≤–∫–∏

    instruction = (
        "–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ—á–ª–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º.\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ Gene Premium –º—ã –æ–±—è–∑–∞–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤–∞—Å.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–∞—à–∏—Ö –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤:\n"
        "‚Ä¢ Brawl Stars Datamines | –ß–∞—Ç\n"
        "‚Ä¢ Gene's Land —á–∞—Ç\n\n"
        "–ê —Ç–∞–∫–∂–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) —Ñ–æ—Ç–æ –ø—Ä–æ—à–∏—Ç–æ–≥–æ 4G –º–æ–¥–µ–º–∞.\n\n"
        "‚è≥ –°—Ä–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ~3 –¥–Ω—è."
    )

    # [–ò–ó–ú–ï–ù–ï–ù–û] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Ä–∞–Ω—å—à–µ
    data = load_requests()
    user_record = data.get(user_id_str, {})
    has_seen = user_record.get("has_seen_instructions", False)

    if not has_seen:
        # –ï—Å–ª–∏ –≤–∏–¥–∏—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        preparing_msg = await callback.message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤–∞—Å –æ–ø–ª–∞—Ç—É...")
        await asyncio.sleep(random.randint(4234, 10110) / 1000)
        await preparing_msg.edit_text(instruction)
        
        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        if user_id_str in data:
            data[user_id_str]["has_seen_instructions"] = True
            save_requests(data)
    else:
        # –ï—Å–ª–∏ —É–∂–µ –≤–∏–¥–µ–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        await callback.message.answer(instruction)


# ---- –ö–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ ----
@dp.callback_query(F.data.startswith("reject_"))
async def reject_request(callback: CallbackQuery):
    if callback.message.chat.id != ADMIN_CHAT_ID: return
    if callback.from_user.id not in ADMINS and callback.from_user.id != MAIN_ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return

    user_id = callback.data.split("_", 1)[1]
    
    # [–ò–ó–ú–ï–ù–ï–ù–û] –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é
    data = load_requests()
    if user_id in data:
        del data[user_id]
        save_requests(data)

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ ‚ùå")
    try:
        # [–ò–ó–ú–ï–ù–ï–ù–û] –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ Gene Premium –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞, –≤—ã–±—Ä–∞–≤ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ /start.")
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

# ===================== –ü–†–ò–Å–ú –ó–ê–Ø–í–û–ö =====================
@dp.message()
async def handle_submission(message: Message, album: Optional[List[Message]] = None):
    if not await ensure_private_and_autoleave(message): return

    user = message.from_user
    user_id = str(user.id)

    if not has_active_request(user_id):
        return # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏

    langs = update_user_lang(user_id, user.language_code or "unknown")
    header = make_header(user, langs)

    admin_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.id}")]]
    )

    try:
        # ===== –ê–õ–¨–ë–û–ú =====
        if album:
            original_caption = album[0].caption or ""
            full_caption = f"{header}\n\n{original_caption}".strip()
            
            photo_video_builder = MediaGroupBuilder()
            doc_builder = MediaGroupBuilder()

            for m in album:
                if m.photo: photo_video_builder.add_photo(m.photo[-1].file_id)
                elif m.video: photo_video_builder.add_video(m.video.file_id)
                elif m.document: doc_builder.add_document(m.document.file_id)
            
            caption_sent = False
            media_sent = False

            # [–ò–°–ü–†–ê–í–õ–ï–ù–û] –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ –±–∏–ª–¥–µ—Ä–µ, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            pv_built = photo_video_builder.build()
            if pv_built:
                pv_built[0].caption = full_caption
                await bot.send_media_group(ADMIN_CHAT_ID, media=pv_built)
                caption_sent = True
                media_sent = True

            doc_built = doc_builder.build()
            if doc_built:
                if not caption_sent:
                    doc_built[0].caption = full_caption
                await bot.send_media_group(ADMIN_CHAT_ID, media=doc_built)
                media_sent = True
            
            if media_sent:
                await bot.send_message(chat_id=ADMIN_CHAT_ID, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–æ–π:", reply_markup=admin_keyboard)
                await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
                mark_submitted(user_id)
            
            return

        # ===== –û–î–ò–ù–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï =====
        cap = f"{header}\n\n{message.caption or ''}".strip()
        if message.photo: await bot.send_photo(ADMIN_CHAT_ID, photo=message.photo[-1].file_id, caption=cap, reply_markup=admin_keyboard)
        elif message.document: await bot.send_document(ADMIN_CHAT_ID, document=message.document.file_id, caption=cap, reply_markup=admin_keyboard)
        elif message.video: await bot.send_video(ADMIN_CHAT_ID, video=message.video.file_id, caption=cap, reply_markup=admin_keyboard)
        elif message.text: await bot.send_message(ADMIN_CHAT_ID, f"{header}\n\n{message.text}", reply_markup=admin_keyboard)
        else:
            await bot.send_message(ADMIN_CHAT_ID, f"{header}\n[–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]", reply_markup=admin_keyboard)

        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        mark_submitted(user_id)

    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

# ===================== –ê–í–¢–û-–õ–ò–í –ò–ó –ß–ê–¢–û–í =====================
@dp.chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def on_added(event: ChatMemberUpdated):
    if event.chat.id != ADMIN_CHAT_ID:
        try:
            await bot.leave_chat(event.chat.id)
            print(f"[LOG] –ê–≤—Ç–æ–≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ {event.chat.id}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {event.chat.id}: {e}")

@dp.message(F.chat.type.in_(["group", "supergroup", "channel"]))
async def leave_any_group(message: Message):
    if message.chat.id != ADMIN_CHAT_ID:
        try:
            await bot.leave_chat(message.chat.id)
            print(f"[LOG] –í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é {message.chat.id}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {e}")

# ===================== MAIN =====================
async def main():
    print(f"[BOOT] ADMIN_CHAT_ID={ADMIN_CHAT_ID}, MAIN_ADMIN_ID={MAIN_ADMIN_ID}, ADMINS={ADMINS}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())```
