import os
import json
import asyncio
import random
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Any, Awaitable, Callable, Dict, List, Optional, Union

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, BaseMiddleware
from aiogram.types import (
    Message, CallbackQuery, ChatMemberUpdated,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile
)
from aiogram.filters import Command, ChatMemberUpdatedFilter, MEMBER

# ===================== ENV =====================

load_dotenv(".env.prem")
API_TOKEN = os.getenv("BOT_TOKEN2")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
MAIN_ADMIN_ID = int(os.getenv("MAIN_ADMIN_ID", "0"))
ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x.strip()]

if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.prem")
if ADMIN_CHAT_ID == 0:
    print("[WARN] ADMIN_CHAT_ID=0 ‚Äî –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–ø–∞–¥—É—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å .env.prem")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –û–±—ä–µ–∫—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_submission_locks = defaultdict(asyncio.Lock)

REQUESTS_FILE = "requests.json"
CONFIG_FILE = "config.json"
WELCOME_IMAGE = "IMG_20250825_170645_742.jpg"

# ===================== STORAGE =====================

def _now() -> datetime:
    return datetime.now()

def load_requests() -> Dict[str, dict]:
    if not os.path.exists(REQUESTS_FILE):
        return {}
    try:
        with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
            txt = f.read().strip()
            data = json.loads(txt) if txt else {}
    except (json.JSONDecodeError, IOError):
        print(f"[WARN] {REQUESTS_FILE} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
        data = {}

    now = _now()
    changed = False
    for uid, rec in list(data.items()):
        if rec.get("started_at"):
            started = rec.get("started_at")
            try:
                if started and now - datetime.fromisoformat(started) > timedelta(days=3):
                    del data[uid]
                    changed = True
            except (ValueError, TypeError):
                del data[uid]
                changed = True
    if changed:
        save_requests(data)
    return data

def save_requests(data: Dict[str, dict]) -> None:
    try:
        with open(REQUESTS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {REQUESTS_FILE}: {e}")

def update_user_lang(user_id: str, lang: str) -> List[str]:
    data = load_requests()
    rec = data.get(user_id) or {
        "full_name": "", "username": "", "langs": [],
        "started_at": None, "submitted": False, "has_seen_instructions": False,
    }
    if lang and lang not in rec["langs"]:
        rec["langs"].append(lang)
    data[user_id] = rec
    save_requests(data)
    return rec["langs"]

def start_request(user, langs: List[str]) -> None:
    data = load_requests()
    user_id_str = str(user.id)
    existing_record = data.get(user_id_str, {})
    has_seen = existing_record.get("has_seen_instructions", False)
    data[user_id_str] = {
        "full_name": user.full_name, "username": user.username or "", "langs": langs,
        "started_at": _now().isoformat(), "submitted": False, "has_seen_instructions": has_seen,
    }
    save_requests(data)

def mark_submitted(user_id: str) -> None:
    data = load_requests()
    if user_id in data:
        data[user_id]["submitted"] = True
        save_requests(data)

def can_start_new_request(user_id: str) -> bool:
    data = load_requests()
    rec = data.get(user_id)
    return not rec or not rec.get("submitted", False)

def has_active_request(user_id: str) -> bool:
    data = load_requests()
    rec = data.get(user_id)
    if not rec or not rec.get("started_at") or rec.get("submitted"):
        return False
    try:
        started = datetime.fromisoformat(rec["started_at"])
        return _now() - started <= timedelta(days=3)
    except (ValueError, TypeError):
        return False

# ===================== CONFIG (—Ü–µ–Ω–∞) =====================

def load_config() -> dict:
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            pass
    return {"price": "9$"}

def save_config(config: dict) -> None:
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

# ===================== HELPERS =====================

async def ensure_private_and_autoleave(message: Message) -> bool:
    if message.chat.type != "private":
        if message.chat.id != ADMIN_CHAT_ID:
            try:
                await bot.leave_chat(message.chat.id)
                print(f"[LOG] –í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ {message.chat.id}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {e}")
        return False
    return True

def make_header(user: "aiogram.types.User", langs: List[str]) -> str:
    username = f"@{user.username}" if user.username else "‚Äî"
    langs_str = ", ".join(langs) or "‚Äî"
    return f"{user.full_name} | id {user.id} | {username} | –Ø–∑—ã–∫–∏: {langs_str}"

# ===================== ALBUM MIDDLEWARE (aiogram 3.x) =====================

class AlbumMiddleware(BaseMiddleware):
    def __init__(self, wait: float = 1.0):
        super().__init__()
        self.wait = wait
        self._buffer: Dict[str, List[Message]] = defaultdict(list)
        self._locks: Dict[str, asyncio.Lock] = defaultdict(asyncio.Lock)

    async def __call__(
        self,
        handler: Callable[[Union[Message, List[Message]], Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        if not isinstance(event, Message) or not event.media_group_id:
            return await handler(event, data)

        group_id = str(event.media_group_id)
        async with self._locks[group_id]:
            self._buffer[group_id].append(event)
            await asyncio.sleep(self.wait)
            messages = self._buffer.pop(group_id, [])
            if not messages:
                return

            messages.sort(key=lambda m: m.message_id)
            data["album"] = messages
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            return await handler(messages, data)

dp.message.middleware(AlbumMiddleware(wait=1.0))

# ===================== HANDLERS =====================

@dp.message(Command("start"))
async def send_welcome(message: Message):
    if not await ensure_private_and_autoleave(message): return
    update_user_lang(str(message.from_user.id), message.from_user.language_code or "unknown")
    price = load_config()["price"]
    caption = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–ª–∞—Ç—ë–∂–Ω—ã–π –±–æ—Ç Gene's Land!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–≤–µ—Ä—Å–∏—é Gene Brawl!\n\n"
        "Gene Premium Ultimate –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏)"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"ü´£ Premium - {price}", callback_data="premium")],
        [InlineKeyboardButton(text="ü©º –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/genepremiumsupportbot")],
    ])
    if os.path.exists(WELCOME_IMAGE):
        try:
            await message.answer_photo(photo=FSInputFile(WELCOME_IMAGE), caption=caption, reply_markup=keyboard)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")
            await message.answer(caption, reply_markup=keyboard)
    else:
        await message.answer(caption, reply_markup=keyboard)

@dp.message(Command("setprice"))
async def set_price(message: Message):
    if message.chat.id != ADMIN_CHAT_ID or message.from_user.id != MAIN_ADMIN_ID: return
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].strip():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprice 15$")
        return
    new_price = args[1].strip()
    cfg = load_config(); cfg["price"] = new_price; save_config(cfg)
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price}")

@dp.callback_query(F.data == "premium")
async def process_premium(callback: CallbackQuery):
    await callback.answer()
    if callback.message.chat.type != "private": return
    price = load_config()["price"]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", url="https://t.me/GenePremium/6")],
        [InlineKeyboardButton(text="üá∑üá∫ –ö–∞—Ä—Ç–æ–π", callback_data="pay_card")],
        [InlineKeyboardButton(text="üåé Crypto (@send) (0%)", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data="pay_stars")],
    ])
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ Premium –∑–∞ {price}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.callback_query(F.data.in_(["pay_card", "pay_crypto", "pay_stars"]))
async def ask_screenshots(callback: CallbackQuery):
    await callback.answer()
    if callback.message.chat.type != "private": return
    user, user_id_str = callback.from_user, str(callback.from_user.id)
    if not can_start_new_request(user_id_str):
        await callback.message.answer("–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è ‚úÖ")
        return
    langs = update_user_lang(user_id_str, user.language_code or "unknown")
    start_request(user, langs)
    instruction = (
        "–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ—á–ª–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º.\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ Gene Premium –º—ã –æ–±—è–∑–∞–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤–∞—Å.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–∞—à–∏—Ö –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤:\n"
        "‚Ä¢ Brawl Stars Datamines | –ß–∞—Ç\n"
        "‚Ä¢ Gene's Land —á–∞—Ç\n\n"
        "–ê —Ç–∞–∫–∂–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) —Ñ–æ—Ç–æ –ø—Ä–æ—à–∏—Ç–æ–≥–æ 4G –º–æ–¥–µ–º–∞.\n\n"
        "‚è≥ –°—Ä–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ~3 –¥–Ω—è."
    )
    data = load_requests()
    user_record = data.get(user_id_str, {})
    if not user_record.get("has_seen_instructions", False):
        preparing_msg = await callback.message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤–∞—Å –æ–ø–ª–∞—Ç—É...")
        await asyncio.sleep(random.randint(4234, 10110) / 1000)
        await preparing_msg.edit_text(instruction)
        if user_id_str in data:
            data[user_id_str]["has_seen_instructions"] = True
            save_requests(data)
    else:
        await callback.message.answer(instruction)

@dp.callback_query(F.data.startswith("reject_"))
async def reject_request(callback: CallbackQuery):
    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ ‚ùå")
    if callback.message.chat.id != ADMIN_CHAT_ID: return
    if callback.from_user.id not in ADMINS and callback.from_user.id != MAIN_ADMIN_ID:
        return
    user_id = callback.data.split("_", 1)[1]
    data = load_requests()
    if user_id in data:
        del data[user_id]
        save_requests(data)
    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception: pass

# ===================== –ü–†–ò–Å–ú –ó–ê–Ø–í–û–ö (—Å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –∞–ª—å–±–æ–º–æ–≤) =====================

@dp.message()
async def handle_submission(messages: Union[Message, List[Message]], album: Optional[List[Message]] = None):
    # messages –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —Ç–∞–∫ –∏ —Å–ø–∏—Å–∫–æ–º (–∞–ª—å–±–æ–º)
    if isinstance(messages, list):
        first_message = messages[0]
    else:
        first_message = messages

    if not await ensure_private_and_autoleave(first_message): return
    user, user_id = first_message.from_user, str(first_message.from_user.id)

    async with user_submission_locks[user_id]:
        if not has_active_request(user_id):
            return

        langs = update_user_lang(user_id, user.language_code or "unknown")
        header = make_header(user, langs)
        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]]
        )

        submission_sent = False
        try:
            # ===== –ê–õ–¨–ë–û–ú =====
            if isinstance(messages, list):
                for m in messages:
                    try:
                        await bot.forward_message(
                            chat_id=ADMIN_CHAT_ID,
                            from_chat_id=m.chat.id,
                            message_id=m.message_id
                        )
                        submission_sent = True
                    except Exception as e:
                        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞: {e}")

                if submission_sent:
                    await bot.send_message(ADMIN_CHAT_ID, text=header, reply_markup=admin_keyboard)

            # ===== –û–î–ò–ù–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï =====
            else:
                if messages.photo or messages.video or messages.document or messages.text:
                    await bot.forward_message(
                        chat_id=ADMIN_CHAT_ID,
                        from_chat_id=messages.chat.id,
                        message_id=messages.message_id
                    )
                    await bot.send_message(ADMIN_CHAT_ID, text=header, reply_markup=admin_keyboard)
                    submission_sent = True
                else:
                    return

            if submission_sent:
                await first_message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
                mark_submitted(user_id)

        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            await first_message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")

# ===================== –ê–í–¢–û-–õ–ò–í –ò–ó –ß–ê–¢–û–í =====================

@dp.chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def on_added(event: ChatMemberUpdated):
    if event.chat.id != ADMIN_CHAT_ID:
        try:
            await bot.leave_chat(event.chat.id)
            print(f"[LOG] –ê–≤—Ç–æ–≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ {event.chat.id}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {event.chat.id}: {e}")

@dp.message(F.chat.type.in_(["group", "supergroup", "channel"]))
async def leave_any_group(message: Message):
    if message.chat.id != ADMIN_CHAT_ID:
        try:
            await bot.leave_chat(message.chat.id)
            print(f"[LOG] –í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é {message.chat.id}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {e}")

# ===================== MAIN =====================

async def main():
    print(f"[BOOT] ADMIN_CHAT_ID={ADMIN_CHAT_ID}, MAIN_ADMIN_ID={MAIN_ADMIN_ID}, ADMINS={ADMINS}")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
