import os
import json
import asyncio
import random
from collections import defaultdict
from datetime import datetime, timedelta
from typing import Dict, List, Union, Optional
from html import escape

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    CallbackQuery,
    ChatMemberUpdated,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.filters import Command, ChatMemberUpdatedFilter, MEMBER
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import (
    InputMediaPhoto,
    InputMediaVideo,
    InputMediaDocument,
    InputMediaAudio,
)

# ===================== ENV =====================
load_dotenv(".env.prem")
API_TOKEN = os.getenv("BOT_TOKEN2")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
MAIN_ADMIN_ID = int(os.getenv("MAIN_ADMIN_ID", "0"))
ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x.strip()]

if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.prem")
if ADMIN_CHAT_ID == 0:
    print("[WARN] ADMIN_CHAT_ID=0 ‚Äî –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–ø–∞–¥—É—Ç –≤ –∞–¥–º–∏–Ω-—á–∞—Ç.\n–ü—Ä–æ–≤–µ—Ä—å .env.prem")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –û–±—ä–µ–∫—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_submission_locks = defaultdict(asyncio.Lock)

REQUESTS_FILE = "requests.json"
CONFIG_FILE = "config.json"
WELCOME_IMAGE = "IMG_20250825_170645_742.jpg"
BANNED_FILE = "banned.json"

# Buffers and tasks to collect messages sent by user within a short window
submission_buffers: Dict[str, List[Message]] = defaultdict(list)
collecting_tasks: Dict[str, asyncio.Task] = {}

# mapping admin chat message_id -> user_id (–¥–ª—è reply –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞)
admin_message_to_user: Dict[int, int] = {}

# ===================== STORAGE & BANS =====================


def _now() -> datetime:
    return datetime.now()


def load_requests() -> Dict[str, dict]:
    if not os.path.exists(REQUESTS_FILE):
        return {}
    try:
        with open(REQUESTS_FILE, "r", encoding="utf-8") as f:
            txt = f.read().strip()
            return json.loads(txt) if txt else {}
    except (json.JSONDecodeError, IOError):
        print(f"[WARN] {REQUESTS_FILE} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
        return {}


def save_requests(data: Dict[str, dict]) -> None:
    try:
        with open(REQUESTS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except IOError as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {REQUESTS_FILE}: {e}")


def load_banned() -> List[int]:
    if not os.path.exists(BANNED_FILE):
        return []
    try:
        with open(BANNED_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
            # –ø—Ä–∏–≤–æ–¥–∏–º –∫ int
            return [int(x) for x in raw if x is not None]
    except Exception:
        return []


def save_banned(b: List[int]) -> None:
    try:
        with open(BANNED_FILE, "w", encoding="utf-8") as f:
            json.dump(b, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {BANNED_FILE}: {e}")


def ban_user_by_id(uid: int) -> None:
    b = load_banned()
    if uid not in b:
        b.append(uid)
        save_banned(b)


def unban_user_by_id(uid: int) -> None:
    b = load_banned()
    if uid in b:
        b.remove(uid)
        save_banned(b)


def is_banned(uid: Union[int, str]) -> bool:
    try:
        uid_int = int(uid)
    except Exception:
        return False
    return uid_int in load_banned()


# ===================== REQUESTS / LANGS =====================


def update_user_lang(user_id: str, lang: str) -> List[str]:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —è–∑—ã–∫ –≤ —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å.
    """
    data = load_requests()
    rec = data.get(user_id) or {
        "full_name": "",
        "username": "",
        "langs": [],
        "started_at": None,
        "submitted": False,
        "has_seen_instructions": False,
    }
    if lang and lang not in rec["langs"]:
        rec["langs"].append(lang)
    data[user_id] = rec
    save_requests(data)
    return rec["langs"]


def start_request(user, langs: List[str]) -> None:
    data = load_requests()
    user_id_str = str(user.id)
    existing_record = data.get(user_id_str, {})
    has_seen = existing_record.get("has_seen_instructions", False)
    data[user_id_str] = {
        "full_name": user.full_name,
        "username": user.username or "",
        "langs": langs,
        "started_at": _now().isoformat(),
        "submitted": False,
        "has_seen_instructions": has_seen,
    }
    save_requests(data)


def mark_submitted(user_id: str) -> None:
    data = load_requests()
    if user_id in data:
        data[user_id]["submitted"] = True
        save_requests(data)


def remove_request(user_id: str) -> None:
    data = load_requests()
    if user_id in data:
        del data[user_id]
        save_requests(data)


def can_start_new_request(user_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –ø–æ–¥–∞–≤–∞–ª –ª–∏ –æ–Ω —É–∂–µ –∑–∞—è–≤–∫—É.
    """
    try:
        if is_banned(int(user_id)):
            return False
    except Exception:
        pass
    data = load_requests()
    rec = data.get(user_id)
    return not rec or not rec.get("submitted", False)


def has_active_request(user_id: str) -> bool:
    data = load_requests()
    rec = data.get(user_id)
    if not rec or not rec.get("started_at") or rec.get("submitted"):
        return False
    try:
        started = datetime.fromisoformat(rec["started_at"])
        return _now() - started <= timedelta(days=3)
    except (ValueError, TypeError):
        return False


# ===================== CONFIG (—Ü–µ–Ω–∞) =====================
def load_config() -> dict:
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except (json.JSONDecodeError, IOError):
            pass
    return {"price": "9$"}


def save_config(config: dict) -> None:
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=2)


# ===================== HELPERS =====================


async def ensure_private_and_autoleave(message: Message) -> bool:
    if message.chat.type != "private":
        if message.chat.id != ADMIN_CHAT_ID:
            try:
                await bot.leave_chat(message.chat.id)
                print(f"[LOG] –í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ {message.chat.id}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {e}")
        return False
    return True


async def notify_if_banned(user_id: Union[int, str]) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω (–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω).
    """
    try:
        uid = int(user_id)
    except Exception:
        return False
    if is_banned(uid):
        try:
            await bot.send_message(uid, "üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ª—å–∑—è.")
        except Exception:
            pass
        return True
    return False


# ===================== HANDLERS =====================


@dp.message(Command("start"))
async def send_welcome(message: Message):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ start
    update_user_lang(str(message.from_user.id), message.from_user.language_code or "unknown")

    # –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    if is_banned(message.from_user.id):
        await message.answer("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ª—å–∑—è.")
        return

    if not await ensure_private_and_autoleave(message):
        return
    price = load_config()["price"]
    caption = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–ª–∞—Ç—ë–∂–Ω—ã–π –±–æ—Ç Gene's Land!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–≤–µ—Ä—Å–∏—é Gene Brawl!\n\n"
        "Gene Premium Ultimate –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏)"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f" Premium - {price}", callback_data="premium")],
        [InlineKeyboardButton(text=" –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/genepremiumsupportbot")],
    ])
    if os.path.exists(WELCOME_IMAGE):
        try:
            await message.answer_photo(photo=FSInputFile(WELCOME_IMAGE), caption=caption, reply_markup=keyboard)
        except Exception as e:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")
            await message.answer(caption, reply_markup=keyboard)
    else:
        await message.answer(caption, reply_markup=keyboard)


@dp.message(Command("setprice"))
async def set_price(message: Message):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
    update_user_lang(str(message.from_user.id), message.from_user.language_code or "unknown")

    if message.chat.id != ADMIN_CHAT_ID or message.from_user.id != MAIN_ADMIN_ID:
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].strip():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprice 15$")
        return
    new_price = args[1].strip()
    cfg = load_config()
    cfg["price"] = new_price
    save_config(cfg)
    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price}")


@dp.callback_query(F.data == "premium")
async def process_premium(callback: CallbackQuery):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Premium
    update_user_lang(str(callback.from_user.id), callback.from_user.language_code or "unknown")

    # –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    if is_banned(callback.from_user.id):
        await callback.answer("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        try:
            await bot.send_message(callback.from_user.id, "üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ª—å–∑—è.")
        except Exception:
            pass
        return

    await callback.answer()
    if callback.message.chat.type != "private":
        return
    # Build payment keyboard with emojis and Home button (—É–±—Ä–∞–ª –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–æ–π", callback_data="pay_card")],
        [InlineKeyboardButton(text="ü™ô Crypto (@send) (0%)", callback_data="pay_crypto")],
        [InlineKeyboardButton(text="‚≠ê Telegram Stars", callback_data="pay_stars")],
        [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="home")],
    ])

    # Instead of sending a new separate message with price, edit the original message/caption
    try:
        if callback.message.photo:
            await callback.message.edit_caption("–í—ã –≤—ã–±—Ä–∞–ª–∏ Premium", reply_markup=keyboard)
        else:
            await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ Premium", reply_markup=keyboard)
    except Exception:
        # fallback ‚Äî just send a new message if edit fails
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ Premium", reply_markup=keyboard)


@dp.callback_query(F.data == "home")
async def go_home(callback: CallbackQuery):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–æ–º–æ–π
    update_user_lang(str(callback.from_user.id), callback.from_user.language_code or "unknown")

    # –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    if is_banned(callback.from_user.id):
        await callback.answer("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        try:
            await bot.send_message(callback.from_user.id, "üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ª—å–∑—è.")
        except Exception:
            pass
        return

    await callback.answer()
    if callback.message.chat.type != "private":
        return
    # Recreate the welcome screen (try to edit caption if there is photo)
    price = load_config()["price"]
    caption = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–ª–∞—Ç—ë–∂–Ω—ã–π –±–æ—Ç Gene's Land!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–≤–µ—Ä—Å–∏—é Gene Brawl!\n\n"
        "Gene Premium Ultimate –≤—ã–¥–∞–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏)"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f" Premium - {price}", callback_data="premium")],
        [InlineKeyboardButton(text=" –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/genepremiumsupportbot")],
    ])
    try:
        if os.path.exists(WELCOME_IMAGE) and callback.message.photo:
            # If the message already has a photo, just edit caption back
            await callback.message.edit_caption(caption, reply_markup=keyboard)
        else:
            # Try to edit text; if impossible, send a new welcome message and delete old
            try:
                await callback.message.edit_text(caption, reply_markup=keyboard)
            except Exception:
                # delete old and send a fresh welcome (keeps UI clean)
                try:
                    await callback.message.delete()
                except Exception:
                    pass
                if os.path.exists(WELCOME_IMAGE):
                    await bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile(WELCOME_IMAGE),
                                         caption=caption, reply_markup=keyboard)
                else:
                    await bot.send_message(chat_id=callback.from_user.id, text=caption, reply_markup=keyboard)
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –¥–æ–º–æ–π: {e}")
        # fallback
        await callback.message.answer(caption, reply_markup=keyboard)


@dp.callback_query(F.data.in_(["pay_card", "pay_crypto", "pay_stars"]))
async def ask_screenshots(callback: CallbackQuery):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    update_user_lang(str(callback.from_user.id), callback.from_user.language_code or "unknown")

    # –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
    if is_banned(callback.from_user.id):
        await callback.answer("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        try:
            await bot.send_message(callback.from_user.id, "üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ª—å–∑—è.")
        except Exception:
            pass
        return

    await callback.answer()
    if callback.message.chat.type != "private":
        return
    user, user_id_str = callback.from_user, str(callback.from_user.id)
    if not can_start_new_request(user_id_str):
        await callback.message.answer("–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è ‚úÖ")
        return
    langs = update_user_lang(user_id_str, user.language_code or "unknown")
    start_request(user, langs)
    instruction = (
        "–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ—á–ª–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º.\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ Gene Premium –º—ã –æ–±—è–∑–∞–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤–∞—Å.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤–∞—à–∏—Ö –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤:\n"
        "‚Ä¢ Brawl Stars Datamines | –ß–∞—Ç\n"
        "‚Ä¢ Gene's Land —á–∞—Ç\n\n"
        "–ê —Ç–∞–∫–∂–µ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) —Ñ–æ—Ç–æ –ø—Ä–æ—à–∏—Ç–æ–≥–æ 4G –º–æ–¥–µ–º–∞.\n\n"
        "‚è≥ –°—Ä–æ–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ~3 –¥–Ω—è."
    )

    data = load_requests()
    user_record = data.get(user_id_str, {})
    if not user_record.get("has_seen_instructions", False):
        preparing_msg = await callback.message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤–∞—Å –æ–ø–ª–∞—Ç—É...")
        await asyncio.sleep(random.randint(4234, 10110) / 1000)
        await preparing_msg.edit_text(instruction)
        # NOTE: removed the 'üîî –ñ–¥—É –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' message as requested
        if user_id_str in data:
            data[user_id_str]["has_seen_instructions"] = True
            save_requests(data)
    else:
        await callback.message.answer(instruction)
        # NOTE: removed the 'üîî –ñ–¥—É –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' message as requested


@dp.callback_query(F.data.startswith("reject_"))
async def reject_request(callback: CallbackQuery):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞
    update_user_lang(str(callback.from_user.id), callback.from_user.language_code or "unknown")

    await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞ ‚ùå")
    if callback.message.chat.id != ADMIN_CHAT_ID:
        return
    if callback.from_user.id not in ADMINS and callback.from_user.id != MAIN_ADMIN_ID:
        return
    user_id = callback.data.split("_", 1)[1]
    data = load_requests()
    if user_id in data:
        del data[user_id]
        save_requests(data)
    try:
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞.")
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass


@dp.callback_query(F.data.startswith("ban_"))
async def ban_request(callback: CallbackQuery):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞
    update_user_lang(str(callback.from_user.id), callback.from_user.language_code or "unknown")

    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üîí")
    if callback.message.chat.id != ADMIN_CHAT_ID:
        return
    if callback.from_user.id not in ADMINS and callback.from_user.id != MAIN_ADMIN_ID:
        return

    user_id = callback.data.split("_", 1)[1]
    try:
        uid = int(user_id)
    except Exception:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return

    try:
        # 1) –∑–∞–±–∞–Ω–∏—Ç—å
        ban_user_by_id(uid)
        # 2) –∑–∞–∫—Ä—ã—Ç—å/—É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        remove_request(str(uid))
        # 3) –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏
        submission_buffers.pop(str(uid), None)
        task = collecting_tasks.pop(str(uid), None)
        if task and not task.done():
            task.cancel()
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {uid}: {e}")

    try:
        await bot.send_message(uid, "üîí –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ª—å–∑—è.")
    except Exception as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass


# ------------------ UNBAN: –∫–æ–º–∞–Ω–¥–∞ –∏ callback ------------------

@dp.message(Command("unban"))
async def cmd_unban(message: Message):
    """
    /unban <user_id>  - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
    –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ reply'–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ –≤—ã–∑–≤–∞—Ç—å /unban (–±–æ—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç—å user_id –∏–∑ admin_message_to_user)
    """
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
    if message.from_user.id not in ADMINS and message.from_user.id != MAIN_ADMIN_ID:
        return

    parts = message.text.split(maxsplit=1)
    target_id: Optional[int] = None
    if len(parts) > 1 and parts[1].strip():
        try:
            target_id = int(parts[1].strip())
        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π id. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
            return
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–∞–Ω–∞ –≤ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å user_id —á–µ—Ä–µ–∑ mapping
        if message.reply_to_message:
            replied_id = message.reply_to_message.message_id
            target_id = admin_message_to_user.get(replied_id)
        if not target_id:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ id: /unban <user_id> –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ.")
            return

    banned = load_banned()
    if target_id not in banned:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
        return

    try:
        unban_user_by_id(target_id)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
        return

    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    try:
        await bot.send_message(chat_id=target_id, text="üîì –í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.")
    except Exception:
        pass


@dp.callback_query(F.data.startswith("unban_"))
async def unban_request(callback: CallbackQuery):
    await callback.answer()
    if callback.message.chat.id != ADMIN_CHAT_ID:
        return
    if callback.from_user.id not in ADMINS and callback.from_user.id != MAIN_ADMIN_ID:
        return

    user_id = callback.data.split("_", 1)[1]
    try:
        uid = int(user_id)
    except Exception:
        await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π id –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return

    banned = load_banned()
    if uid not in banned:
        await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        return

    try:
        unban_user_by_id(uid)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        return

    await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    try:
        await bot.send_message(chat_id=uid, text="üîì –í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.")
    except Exception:
        pass

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass


# ===================== –ü–†–ò–Å–ú –ó–ê–Ø–í–û–ö (—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º) =====================


# Internal function that actually sends collected messages to admin chat
async def handle_submission(messages: Union[Message, List[Message]]):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—á–∫—É
    first_message: Message = messages[0] if isinstance(messages, list) else messages
    if not await ensure_private_and_autoleave(first_message):
        return
    user = first_message.from_user
    user_id_str = str(user.id)

    # –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (—É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∑–∞—è–≤–∫—É)
    if is_banned(user.id):
        remove_request(user_id_str)
        submission_buffers.pop(user_id_str, None)
        task = collecting_tasks.pop(user_id_str, None)
        if task and not task.done():
            try:
                task.cancel()
            except Exception:
                pass
        try:
            await bot.send_message(chat_id=user.id, text="üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception:
            pass
        return

    async with user_submission_locks[user_id_str]:
        if not has_active_request(user_id_str):
            return
        update_user_lang(user_id_str, user.language_code or "unknown")

        # –®–∞–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ + –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        safe_full_name = escape(user.full_name or "(–±–µ–∑ –∏–º–µ–Ω–∏)")
        safe_username = f"@{escape(user.username)}" if user.username else ""
        data = load_requests()
        langs = data.get(user_id_str, {}).get("langs", [user.language_code or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])
        safe_langs = ", ".join([escape(str(x)) for x in langs])
        header = f"{safe_full_name} {safe_username}\nID: {user.id}\n–Ø–∑—ã–∫–∏: {safe_langs}"
        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.id}"),
                 InlineKeyboardButton(text="üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ban_{user.id}")],
            ]
        )

        try:
            # ===== –ú–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–ô (–≤–∫–ª—é—á–∞—è –∞–ª—å–±–æ–º—ã) =====
            if isinstance(messages, list):
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id (–ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏—Ö–æ–¥–∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
                album_msgs: List[Message] = sorted(messages, key=lambda m: m.message_id)

                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–ª—å–±–æ–º ‚Äî –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π media_group_id
                media_group_ids = {getattr(m, "media_group_id", None) for m in album_msgs}
                if len(media_group_ids) == 1 and next(iter(media_group_ids)) is not None:
                    # –î–ª—è –∞–ª—å–±–æ–º–æ–≤: –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ media (telegram —Å–æ—Ö—Ä–∞–Ω–∏—Ç –ø–æ—Ä—è–¥–æ–∫),
                    # –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–ø–∫—É —Å –∫–Ω–æ–ø–∫–æ–π
                    for m in album_msgs:
                        res = await bot.copy_message(chat_id=ADMIN_CHAT_ID, from_chat_id=m.chat.id, message_id=m.message_id)
                        admin_message_to_user[res.message_id] = int(user.id)
                    header_msg = await bot.send_message(ADMIN_CHAT_ID, text=header, reply_markup=admin_keyboard)
                    admin_message_to_user[header_msg.message_id] = int(user.id)

                else:
                    # –ù–µ –∞–ª—å–±–æ–º ‚Äî —Å–æ–±–∏—Ä–∞–µ–º InputMedia –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ media_group –∫–æ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ
                    media_group = []
                    for i, m in enumerate(album_msgs):
                        caption = getattr(m, "html_text", None) or getattr(m, "caption_html", None) or None
                        cap = caption if i == 0 else None
                        if m.photo:
                            file_id = m.photo[-1].file_id
                            media_group.append(InputMediaPhoto(media=file_id, caption=cap, parse_mode="HTML"))
                        elif m.video:
                            media_group.append(InputMediaVideo(media=m.video.file_id, caption=cap, parse_mode="HTML"))
                        elif getattr(m, "document", None):
                            media_group.append(InputMediaDocument(media=m.document.file_id, caption=cap, parse_mode="HTML"))
                        elif getattr(m, "audio", None):
                            media_group.append(InputMediaAudio(media=m.audio.file_id, caption=cap, parse_mode="HTML"))
                        else:
                            # –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Ç–∏–ø, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –≤ –∞–ª—å–±–æ–º–∞—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–æ–∫–∏–Ω–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                            res = await bot.copy_message(chat_id=ADMIN_CHAT_ID, from_chat_id=m.chat.id, message_id=m.message_id)
                            admin_message_to_user[res.message_id] = int(user.id)
                    if media_group:
                        sent = await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media_group)
                        for s in sent:
                            admin_message_to_user[s.message_id] = int(user.id)
                        header_msg = await bot.send_message(ADMIN_CHAT_ID, text=header, reply_markup=admin_keyboard)
                        admin_message_to_user[header_msg.message_id] = int(user.id)

            # ===== –û–î–ò–ù–û–ß–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï =====
            else:
                res = await bot.copy_message(
                    chat_id=ADMIN_CHAT_ID, from_chat_id=first_message.chat.id, message_id=first_message.message_id
                )
                admin_message_to_user[res.message_id] = int(user.id)
                header_msg = await bot.send_message(ADMIN_CHAT_ID, text=header, reply_markup=admin_keyboard)
                admin_message_to_user[header_msg.message_id] = int(user.id)

            # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É
            await bot.send_message(chat_id=user.id, text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
            mark_submitted(user_id_str)

        except TelegramBadRequest as e:
            # —á–∞—Å—Ç—ã–π –∫–µ–π—Å: –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è media/caption –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
            print(f"[BAD_REQUEST] {e!r}")
            await first_message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ (–∏–ª–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏).")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            await first_message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—É—Ñ–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É-–∫–æ–ª–ª–µ–∫—Ç–æ—Ä
@dp.message(F.chat.type == "private")
async def collect_user_messages(message: Message):
    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –ø—Ä–∏ –ª—é–±–æ–º –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    update_user_lang(str(message.from_user.id), message.from_user.language_code or "unknown")

    # –µ—Å–ª–∏ –∑–∞–±–∞–Ω–µ–Ω ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ —É–≤–µ–¥–æ–º–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ
    if is_banned(message.from_user.id):
        # —É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏ –±—É—Ñ–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
        remove_request(str(message.from_user.id))
        submission_buffers.pop(str(message.from_user.id), None)
        task = collecting_tasks.pop(str(message.from_user.id), None)
        if task and not task.done():
            try:
                task.cancel()
            except Exception:
                pass
        try:
            await message.answer("üîí –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ–ª—å–∑—è.")
        except Exception:
            pass
        return

    if not await ensure_private_and_autoleave(message):
        return
    user = message.from_user
    user_id_str = str(user.id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if not has_active_request(user_id_str) or load_requests().get(user_id_str, {}).get("submitted"):
        return

    # –ü–æ–ª–æ–∂–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    submission_buffers[user_id_str].append(message)

    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º
    existing = collecting_tasks.get(user_id_str)
    if existing and not existing.done():
        return

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–æ—Ä: –∂–¥—ë—Ç 3 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω–æ–µ
    async def _collector(uid: str):
        await asyncio.sleep(3)
        msgs = submission_buffers.pop(uid, [])
        collecting_tasks.pop(uid, None)
        if not msgs:
            return
        if len(msgs) == 1:
            await handle_submission(msgs[0])
        else:
            await handle_submission(msgs)

    task = asyncio.create_task(_collector(user_id_str))
    collecting_tasks[user_id_str] = task


# ===================== –ê–î–ú–ò–ù: –æ—Ç–≤–µ—Ç reply -> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é =====================
@dp.message(F.chat.id == ADMIN_CHAT_ID)
async def admin_reply_handler(message: Message):
    """
    –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç reply'–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ, –∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–Ω–µ–µ
    —Å–≤—è–∑–∞–Ω–æ —Å user_id (–≤ admin_message_to_user), —Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (reply –æ—Ç –∞–¥–º–∏–Ω–∞)
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    if message.from_user.id not in ADMINS and message.from_user.id != MAIN_ADMIN_ID:
        return

    if not message.reply_to_message:
        return

    replied = message.reply_to_message
    target_user_id = admin_message_to_user.get(replied.message_id)
    if not target_user_id:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –º–∞–ø–ø–∏–Ω–≥–µ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å reply_to_message.forward_from (–∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
        ffrom = getattr(replied, "forward_from", None)
        if ffrom and getattr(ffrom, "id", None):
            target_user_id = ffrom.id

    if not target_user_id:
        # –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å
        return

    # –ª–æ–≥–∏—Ä—É–µ–º —è–∑—ã–∫ –∞–¥–º–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    update_user_lang(str(message.from_user.id), message.from_user.language_code or "unknown")

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª–µ–≤–æ–π –∑–∞–±–∞–Ω–µ–Ω ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –∞–¥–º–∏–Ω–∞ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–º
    if is_banned(target_user_id):
        await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", quote=False)
        return

    try:
        # –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω-—á–∞—Ç–∞ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.copy_message(chat_id=target_user_id, from_chat_id=message.chat.id, message_id=message.message_id)
        # –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç–µ –æ–± —É—Å–ø–µ—Ö–µ (—Ç–∏—Ö–æ)
        await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", quote=False)
    except TelegramBadRequest as e:
        print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", quote=False)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", quote=False)


# ===================== –ê–í–¢–û-–õ–ò–í –ò–ó –ß–ê–¢–û–í =====================
@dp.chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def on_added(event: ChatMemberUpdated):
    if event.chat.id != ADMIN_CHAT_ID:
        try:
            await bot.leave_chat(event.chat.id)
            print(f"[LOG] –ê–≤—Ç–æ–≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ {event.chat.id}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {event.chat.id}: {e}")


@dp.message(F.chat.type.in_(["group", "supergroup", "channel"]))
async def leave_any_group(message: Message):
    if message.chat.id != ADMIN_CHAT_ID:
        try:
            await bot.leave_chat(message.chat.id)
            print(f"[LOG] –í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é {message.chat.id}")
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {e}")


# ===================== MAIN =====================
async def main():
    print(f"[BOOT] ADMIN_CHAT_ID={ADMIN_CHAT_ID}, MAIN_ADMIN_ID={MAIN_ADMIN_ID}, ADMINS={ADMINS}")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
