import os
import asyncio
import logging
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import Command

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)

logger = logging.getLogger(__name__)

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ----------
load_dotenv(".env.prem")
API_TOKEN = os.getenv("BOT_TOKEN2")
if not API_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN2 –Ω–µ –∑–∞–¥–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å .env.prem")
    raise SystemExit(1)

# ---------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ----------
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
@dp.message(Command("start"))
async def send_welcome(message: Message):
    caption = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–ª–∞—Ç—ë–∂–Ω—ã–π –±–æ—Ç Gene's Land!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium-–≤–µ—Ä—Å–∏—é Gene Brawl!\n\n"
        "–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–¥–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
        "(–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏)"
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="ü´£ Premium - 500stars", callback_data="premium")],
            [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/YourSupportLink")],
        ]
    )

    image_path = "IMG_20250825_170645_742.jpg"
    if not os.path.isfile(image_path):
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª)
        logger.warning("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: %s. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ.", image_path)
        await message.answer(caption, reply_markup=keyboard)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    with open(image_path, "rb") as photo:
        await message.answer_photo(photo, caption=caption, reply_markup=keyboard)


@dp.callback_query(F.data == "premium")
async def process_premium(callback: CallbackQuery):
    # acknowledge the callback (so loading spinner on client disappears)
    await callback.answer()
    # –û—Ç–≤–µ—Ç–∏–º –≤ —á–∞—Ç (–µ—Å–ª–∏ —É callback –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)
    if callback.message:
        await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ Premium –∑–∞ 500‚≠ê")
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–µ—Ç callback.message
        await callback.bot.send_message(callback.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Premium –∑–∞ 500‚≠ê")


# ---------- –ó–∞–ø—É—Å–∫ / –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ----------
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        # start_polling –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ
        await dp.start_polling(bot)
    finally:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏...")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é —Å–µ—Å—Å–∏—é aiohttp —É Bot
        try:
            await bot.session.close()
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot.session: %s", e)
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        try:
            await bot.close()
        except Exception:
            # bot.close –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            pass
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
